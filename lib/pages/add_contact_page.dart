import 'package:contact_app/controllers/contact_controllers.dart';
import 'package:contact_app/models/contact.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

class AddContactPage extends StatelessWidget {
  final ContactController contactController = Get.find();

  final Contact? contact; // If null, adding a new contact
  AddContactPage({super.key, this.contact});

  // Form key for validation
  final _formKey = GlobalKey<FormState>();

  // Controllers for each field
  final TextEditingController nameController = TextEditingController();
  final TextEditingController phoneController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController addressController = TextEditingController();

  void _addOrUpdateContact() {
    if (_formKey.currentState!.validate()) {
      final name = nameController.text.trim();
      final phone = phoneController.text.trim();
      final email = emailController.text.trim();
      final address = addressController.text.trim();

      if (contact == null) {
        // Adding a new contact
        contactController.addContact(Contact(
          id: '', // ID will be generated by Firebase
          name: name,
          phone: phone,
          email: email,
          address: address,
        ));
      } else {
        // Updating an existing contact
        contactController.updateContact(Contact(
          id: contact!.id,
          name: name,
          phone: phone,
          email: email,
          address: address,
        ));
      }
      Get.back();
    }
  }

  @override
  Widget build(BuildContext context) {
    // Pre-fill controllers if editing a contact
    if (contact != null) {
      nameController.text = contact!.name;
      phoneController.text = contact!.phone;
      emailController.text = contact!.email;
      addressController.text = contact!.address;
    }

    return Scaffold(
      appBar: AppBar(
        title: Text(contact == null ? 'Add Contact' : 'Edit Contact'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              // Name Field
              TextFormField(
                controller: nameController,
                decoration: InputDecoration(labelText: 'Name'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a name';
                  }
                  return null;
                },
              ),
              SizedBox(height: 16.0),

              // Phone Field
              TextFormField(
                controller: phoneController,
                decoration: InputDecoration(labelText: 'Phone'),
                keyboardType: TextInputType.phone,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a phone number';
                  } else if (!RegExp(r'^\+?\d{11}$').hasMatch(value)) {
                    return 'Enter a valid phone number';
                  }
                  return null;
                },
              ),
              SizedBox(height: 16.0),

              // Email Field
              TextFormField(
                controller: emailController,
                decoration: InputDecoration(labelText: 'Email'),
                keyboardType: TextInputType.emailAddress,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return null;
                  } else if (!RegExp(r'^[^@]+@[^@]+\.[^@]+').hasMatch(value)) {
                    return 'Enter a valid email address';
                  }
                  return null;
                },
              ),
              SizedBox(height: 16.0),

              // Address Field
              TextFormField(
                controller: addressController,
                decoration: InputDecoration(labelText: 'Address'),
              ),
              Expanded(child: Container()),
              Container(
                width: double.infinity,
                child: ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8.0)),
                    padding: EdgeInsets.all(12.0),
                  ),
                  onPressed: _addOrUpdateContact,
                  child: Text(contact == null ? 'Add Contact' : 'Update Contact'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
